{"version":3,"sources":["components/PostInput.js","components/Post.js","components/PostList.js","App.js","serviceWorker.js","index.js"],"names":["PostInput","props","state","post","title","content","timestamp","submitError","handleTitleChange","bind","handleContentChange","handleSubmit","event","this","setState","Object","assign","target","value","now","Date","fetch","process","method","body","JSON","stringify","headers","then","response","status","json","data","console","log","window","location","reload","catch","error","preventDefault","Alert","variant","dismissible","onClose","Container","className","handleErrorAlert","Form","Group","controlId","Label","Control","type","onChange","placeholder","as","Button","onClick","React","Component","Post","deletePost","Row","Col","source","getDate","sm","epoch","d","toLocaleTimeString","toLocaleDateString","PostList","posts","updatePosts","getPosts","Array","isArray","map","key","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2a73c101.chunk.js","sourcesContent":["import React from 'react';\nimport Form from 'react-bootstrap/Form'\nimport Container from 'react-bootstrap/Container'\nimport Button from 'react-bootstrap/Button'\nimport Alert from 'react-bootstrap/Alert'\n\nclass PostInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      post: {\n        title: \"\",\n        content: \"\",\n        timestamp: 0,\n      },\n      submitError: false,\n    };\n\n    this.handleTitleChange = this.handleTitleChange.bind(this);\n    this.handleContentChange = this.handleContentChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleTitleChange(event) {\n    this.setState({\n      post: Object.assign({}, this.state.post, {title: event.target.value})\n    });\n  }\n\n  handleContentChange(event) {\n    this.setState({\n      post: Object.assign({}, this.state.post, {content: event.target.value})\n    });\n  }\n\n  handleSubmit(event) {\n    var now = Date.now();\n    var backendHost = process.env.REACT_APP_BACKEND_HOST;\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\n        backendHost = '';\n    }\n    fetch(`${backendHost}/posts`, {\n        method: 'POST',\n        body: JSON.stringify(Object.assign({}, this.state.post, {timestamp: now})),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      })\n      .then(response => {\n        if (response.status !== 200) {\n          this.setState({submitError: response.status})\n          return;\n        }\n\n        response.json().then(data => console.log(\"Recieved response:\" + data));\n        window.location.reload()\n      })\n      .catch(error => console.log(error));\n    event.preventDefault();\n  }\n\n  handleErrorAlert() {\n    if (this.state.submitError) {\n      return (\n        <Alert variant=\"danger\"\n               dismissible\n               onClose={() => this.setState({submitError: false})}>\n          Unable to submit post, received status {this.state.submitError} from server.\n        </Alert>\n      );\n    }\n  }\n\n  render() {\n    return (\n      <Container className=\"post-input\">\n        {this.handleErrorAlert()}\n        <Form>\n          <Form.Group controlId=\"formTitle\">\n            <Form.Label>Title</Form.Label>\n            <Form.Control\n              type=\"text\"\n              value={this.state.title}\n              onChange={this.handleTitleChange}\n              placeholder=\"Title\" />\n          </Form.Group>\n          <Form.Group controlId=\"formContnet\">\n            <Form.Label>Content</Form.Label>\n            <Form.Control\n              as=\"textarea\"\n              value={this.state.content}\n              onChange={this.handleContentChange}\n              placeholder=\"Enter text\" />\n          </Form.Group>\n          <Button variant=\"primary\" type=\"submit\" onClick={this.handleSubmit}>\n            Submit\n          </Button>\n        </Form>\n      </Container>\n    )\n  }\n}\n\nexport default PostInput","import React from 'react';\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Container from 'react-bootstrap/Container'\nimport ReactMarkdown from 'react-markdown';\nimport Button from 'react-bootstrap/Button';\n\n\nclass Post extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: this.props.title,\n      content: this.props.content,\n      timestamp: this.props.timestamp,\n    }\n    this.deletePost = this.deletePost.bind(this);\n  }\n\n  render() {\n    return (\n      <Container className=\"post\">\n        <Row className=\"post-title\">\n          <Col>\n            {this.props.title}\n          </Col>\n        </Row>\n        <Row className=\"post-content\">\n          <Col>\n            <ReactMarkdown source={this.props.content}/>\n          </Col>\n        </Row>\n        <Row className=\"post-footer justify-content-between\">\n          <Col className=\"post-time\">\n            {this.getDate(this.props.timestamp)}\n          </Col>\n          <Col className=\"delete-post-button\" sm={1}>\n            <Button variant=\"danger\" type=\"submit\" onClick={this.deletePost}>\n              Delete\n            </Button>\n          </Col>\n        </Row>\n      </Container>\n    )\n  }\n  getDate(epoch) {\n    var d = new Date(epoch);\n    return \"Posted at \" + d.toLocaleTimeString() + \" on \" + d.toLocaleDateString()\n  }\n\n  deletePost() {\n    var backendHost = process.env.REACT_APP_BACKEND_HOST;\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\n        backendHost = '';\n    }\n    fetch(`${backendHost}/posts`, {\n      method: 'DELETE',\n      body: JSON.stringify(this.state),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n    .then(response => response.json())\n    .then(data => console.log(data))\n    .catch(error => console.log(error))\n    window.location.reload();\n  }\n\n}\n\nexport default Post","import React from 'react';\nimport Post from './Post'\nimport Container from 'react-bootstrap/Container'\n\nclass PostList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      posts: null,\n    }\n    this.updatePosts = this.updatePosts.bind(this)\n  }\n\n  componentDidMount() {\n    var backendHost = process.env.REACT_APP_BACKEND_HOST;\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\n        backendHost = '';\n    }\n    fetch(`${backendHost}/posts`)\n      .then(response => response.json())\n      .then(data => this.updatePosts(data))\n  }\n\n  render() {\n    return (\n      <Container>\n        {this.getPosts()}\n      </Container>\n    )\n  }\n\n  updatePosts(posts) {\n    if (Array.isArray(posts)) {\n      this.setState({\n        posts: posts\n      })\n    }\n  }\n\n  getPosts() {\n    if (this.state.posts == null) {\n      return <div> waiting </div>\n    } else {\n      return this.state.posts.map((post) =>\n        <Post title={post.title} content={post.content} timestamp={post.timestamp} key={post.timestamp}/>\n      )\n    }\n  }\n}\n\nexport default PostList","import React from 'react';\nimport './App.css';\nimport PostInput from './components/PostInput'\nimport PostList from './components/PostList'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\n\nfunction App() {\n  return (\n    <Container>\n      <Row>\n        <Container>\n          <PostInput/>\n        </Container>\n      </Row>\n      <div className=\"separator\"/>\n      <Row>\n        <PostList/>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}